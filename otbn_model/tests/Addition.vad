include "../code/decls.vad"

#verbatim
include "../code/vale.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

include "BitVector.dfy"

import opened bignum_vale
import opened bignum_def
import opened ops
import opened types

import opened bignum_decls
import opened CutomBitVector
import opened powers

#endverbatim

type cbv:Type(0) extern;

function equal_uint256(bv: cbv, v: uint256): bool extern;
function equal_uint512(bv: cbv, v1: uint256, v2: uint256): bool extern;
function get_carray_flag(fg: Flags): uint1 extern;
function add(v1: cbv, v2: cbv) : tuple(cbv, uint1) extern;
function pow2(e: int) : (r : int) extern;
const BASE_256: int extern;

procedure add_256(ghost v1: cbv, ghost v2: cbv)
    requires
        equal_uint256(v1, w1);
        equal_uint256(v2, w2);
    reads
        w1; w2;
    modifies
        w3; flags;
{
    BN_ADD(w3, w2, w1, false, 0, false);
    ghost var rst := add(v1, v2);
    ghost var v3 := fst(rst);
    ghost var c := snd(rst);

    assume pow2(256) == BASE_256;
    assert c == get_carray_flag(flags);
    assert equal_uint256(v3, w3);
}

procedure add_512(ghost v1: cbv, ghost v2: cbv)
    requires
        equal_uint512(v1, w1, w2);
        equal_uint512(v2, w3, w4);
    reads
        w1; w2; w3; w4;
    modifies
        w5; w6; flags;
{
    BN_ADD(w5, w3, w1, false, 0, false);
    BN_ADDC(w6, w4, w2, false, 0, false);

    ghost var rst := add(v1, v2);
    ghost var v3 := fst(rst);
    // ghost var c := snd(rst);
    assert equal_uint512(v3, w5, w6);
}