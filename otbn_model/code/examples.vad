include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../code/example_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

module examples {

import opened bignum_vale
import opened example_lemmas

import opened bignum_def
import opened ops
import opened types

import opened bignum_decls

#endverbatim

procedure DoubleExample32(inout dst:reg32, in src:reg32)
    requires
        src + src < 0x1_0000_0000;
    ensures
        dst = old(src) + old(src);
{
    Add32(dst, src, src);
}

procedure DoubleRegExample32()
    requires
        x2 + x2 < 0x1_0000_0000;
    ensures
        x2 = old(x2) + old(x2);
    modifies
        x2;
{
    Add32(x2, x2, x2);
}

procedure Increment(inout dst:reg32)
    ensures
        dst == old(dst) + 1;
{
    Addi32(dst, dst, 1);
}

procedure LoopExample(inout dst:reg32)
    requires
        dst == 0;
    ensures
        dst == 3;
    modifies
        flags;
{
    while (dst < 3)
        invariant 0 <= dst <= 3;
        decreases 3 - dst;
    {
        Increment(dst);
    }
}

ghost procedure lemma_bn_half_mul(
    ghost wacc_g1: uint256,
    ghost wacc_g2: uint256,
    ghost wacc_g3: uint256,
    ghost wacc_g4: uint256,
    ghost wacc_g5: uint256,
    ghost wacc_g6: uint256,
    ghost wacc_g7: uint256,
    ghost wacc_g8: uint256,
    ghost wacc_g9: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost result_g1: uint256,
    ghost result_g2: uint256,
    ghost w1: uint256,
    ghost w28: uint256,
    ghost w29: uint256
) extern;

function half_product(p: int, x:int, y:int): bool extern;

procedure half_mul(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
    ensures half_product(dst, src1, src2);
{
    let w1_g1 := dst;

    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    // BN.MULQACC.Z w28.0, w29.0, 0
    let wacc_g1 := wacc;
    assert wacc_g1 == mulqacc256(true, src1, 0, src2, 0, 0, 0);

    BN_MULQACC(src1, 1, src2, 0, 1);
    // BN.MULQACC w28.1, w29.0, 1
    let wacc_g2 := wacc;
    assert wacc_g2 == mulqacc256(false, src1, 1, src2, 0, 1, wacc_g1);

    BN_MULQACC_SO(dst, true, src1, 0, src2, 1, 1);
    // BN.MULQACC.SO w1.L, w28.0, w29.1, 1
    let wacc_g3 := wacc;
    let w1_g2 := dst;
    let result_g1 := mulqacc256(false, src1, 0, src2, 1, 1, wacc_g2);
    assert wacc_g3 == uint256_uh(result_g1)
        && w1_g2 == uint256_hwb(w1_g1, uint256_lh(result_g1), true);

    BN_MULQACC(src1, 2, src2, 0, 0);
    // BN.MULQACC w28.2, w29.0, 0
    let wacc_g4 := wacc;
    assert wacc_g4 == mulqacc256(false, src1, 2, src2, 0, 0, wacc_g3);

    BN_MULQACC(src1, 1, src2, 1, 0);
    // BN.MULQACC w28.1, w29.1, 0
    let wacc_g5 := wacc;
    assert wacc_g5 == mulqacc256(false, src1, 1, src2, 1, 0, wacc_g4);

    BN_MULQACC(src1, 0, src2, 2, 0);
    // BN.MULQACC w28.0, w29.2, 0
    let wacc_g6 := wacc;
    assert wacc_g6 == mulqacc256(false, src1, 0, src2, 2, 0, wacc_g5);

    BN_MULQACC(src1, 3, src2, 0, 1);
    // BN.MULQACC w28.3, w29.0, 1
    let wacc_g7 := wacc;
    assert wacc_g7 == mulqacc256(false, src1, 3, src2, 0, 1, wacc_g6);

    BN_MULQACC(src1, 2, src2, 1, 1);
    // BN.MULQACC w28.2, w29.1, 1
    let wacc_g8 := wacc;
    assert wacc_g8 == mulqacc256(false, src1, 2, src2, 1, 1, wacc_g7);

    BN_MULQACC(src1, 1, src2, 2, 1);
    // BN.MULQACC w28.1, w29.2, 1
    let wacc_g9 := wacc;
    assert wacc_g9 == mulqacc256(false, src1, 1, src2, 2, 1, wacc_g8);

    BN_MULQACC_SO(dst, false, src1, 0, src2, 3, 1);
    // BN.MULQACC.SO w1.U, w28.0, w29.3, 1
    let result_g2 := mulqacc256(false, src1, 0, src2, 3, 1, wacc_g9);
    assert wacc == uint256_uh(result_g2)
        && dst == uint256_hwb(w1_g2, uint256_lh(result_g2), false);

    lemma_bn_half_mul(wacc_g1, wacc_g2, wacc_g3, wacc_g4, wacc_g5, wacc_g6, wacc_g7, wacc_g8, wacc_g9,
        w1_g1, w1_g2, result_g1, result_g2,
        dst, src1, src2);
}

function invariant_d0inv(i: uint32, w28: uint256, w29: uint256, w0: uint256) : bool extern;

ghost procedure lemma_d0inv_pre_loop(
    ghost w0_g0: uint256,
    ghost w0_g1: uint256,
    ghost w0: uint256,
    ghost w29: uint256) extern;

ghost procedure lemma_d0inv_mid_loop(
    ghost i_0: uint32,
    ghost w0: uint256,
    ghost w0_g1: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost w28: uint256,
    ghost w29: uint256,
    ghost w29_g1: uint256) extern;

// TODO: loop doesn't actually use a register, add loop counter to model maybe
procedure d0inv(inout i:reg32)
    requires
        i == 0;
        w28 % 2 == 1;
    reads
        w28;
    modifies
        w1; w0; w29; w31; flags; wacc;
{
    let w0_g1 := w0;

    BN_XOR(w0, w0, w0, false, 0);
    // BN.XOR w0, w0, w0
    let w0_g2 := w0;
    assert w0_g2 == xor256(w0_g1, w0_g1, false, 0);

    BN_ADDI(w0, w0, 1, false);
    // BN.ADDI w0, w0, 1
    assert w0 == fst(addi256(w0_g2, 1));

    BN_MOV(w29, w0);
    // BN.MOV w29, w0
    assert w29 == w0;

    lemma_d0inv_pre_loop(w0_g1, w0_g2, w0, w29);

    while (i < 256)
        invariant invariant_d0inv(i, w28, w29, w0);
        decreases 256 - i;
    {
        let w0_g1 := w0;
        let w29_g1 := w29;

        half_mul(w1, w28, w29);

        let w1_g1 := w1;
        assert half_product(w1_g1, w28, w29_g1);

        BN_AND(w1, w1, w0, false, 0);
        // BN.AND w1, w1, w0
        let w1_g2 := w1;
        assert w1_g2 == and256(w1_g1, w0_g1, false, 0);

        BN_OR(w29, w29, w1, false, 0);
        // BN.OR w29, w29, w1
        assert w29 == or256(w29_g1, w1_g2, false, 0);

        BN_ADD(w0, w0, w0, false, 0, false);
        // BN.ADD w0, w0, w0
        assert w0 == fst(add256(w0_g1, w0_g1, false, 0));

        let i_0 := i;

        Increment(i);

        lemma_d0inv_mid_loop(i_0, w0, w0_g1, w1_g1, w1_g2, w28, w29, w29_g1);
    }

    BN_SUB(w29, w31, w29, false, 0, false);
    // BN.SUB w29, w31, w29
}

#verbatim
}
#endverbatim
