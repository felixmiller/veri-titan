include "decls.vad"

#verbatim
include "../code/vale.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

import opened bignum_vale
import opened bignum_def
import opened ops
import opened types
import opened bignum_decls

#endverbatim

procedure DoubleExample32(inout dst:reg32, in src:reg32)
    requires
        src + src < 0x1_0000_0000;
    ensures
        dst = old(src) + old(src);
{
    Add32(dst, src, src);
}

procedure DoubleRegExample32()
    requires
        x2 + x2 < 0x1_0000_0000;
    ensures
        x2 = old(x2) + old(x2);
    modifies
        x2;
{
    Add32(x2, x2, x2);
}

procedure Increment(inout dst:reg32)
    requires
        old(dst) < 100;
    ensures
        dst == old(dst) + 1;
{
    Addi32(dst, dst, 1);
}

procedure LoopExample(inout dst:reg32)
    requires
        dst == 0;
    ensures
        dst == 3;
    modifies
        flags;
{
    let gc := dst;

    while (dst != 0)
        invariant 0 <= gc <= old(dst);
        // invariant 0 <= dst <= 3;
        // decreases 3 - dst;
    {
        
        gc := gc - 1;
    }
}

procedure CopyExample()
    requires
        Valid32Addr(xmem, x0 + 0);
        Valid32Addr(xmem, x0 + 4);
    reads
        x0;
    ensures
        Valid32Addr(xmem, x0 + 0);
        Valid32Addr(xmem, x0 + 4);
        xmem == old(xmem[x0 + 4 := xmem[x0 + 0]]);
    modifies
        xmem; x2;
{
    LW(x2, x0, 0);
    SW(x2, x0, 4);
}