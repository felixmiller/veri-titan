include "decls.vad"

#verbatim
include "vale.dfy"
include "../spec/def.dfy"
include "decls.dfy"
include "example.s.dfy"

module examples {

import opened bignum_vale
import opened bignum_def
import opened bignum_decls
import opened example_lemmas

#endverbatim

ghost procedure lemma_xor_clear(ghost x:int)
    ensures false;
    extern;


procedure DoubleExample32(inout dst:reg32, in src:reg32)
    requires
        src + src < 0x1_0000_0000;
    ensures
        dst = old(src) + old(src);
{
    Add32(dst, src, src);
}

procedure DoubleRegExample32()
    requires
        x2 + x2 < 0x1_0000_0000;
    ensures
        x2 = old(x2) + old(x2);
    modifies
        x2;
{
    Add32(x2, x2, x2);
}

// procedure half_mul(in src1:reg256, in src2:reg256)
procedure half_mul()
    reads w28; w29;
    modifies wacc;
{
    Mulqacc256(false, w28, 0, w29, 0, 0);
    // BN.MULQACC.Z w28.0, w29.0, 0
    // BN.MULQACC w28.1, w29.0, 64
    // BN.MULQACC.SO w1.L, w28.0, w29.1, 64
    // BN.MULQACC w28.2, w29.0, 0
    // BN.MULQACC w28.1, w29.1, 0
    // BN.MULQACC w28.0, w29.2, 0
    // BN.MULQACC w28.3, w29.0, 64
    // BN.MULQACC w28.2, w29.1, 64
    // BN.MULQACC w28.1, w29.2, 64
    // BN.MULQACC.SO w1.U, w28.0, w29.3, 64
}

procedure d0inv()
    modifies
        w0; w29; flags;
{
    lemma_xor_clear(w0);

    Xor256(w0, w0, w0, false, 0);
    Addi256(w0, w0, 1, false);
    Mov256(w29, w0);
    assert(w29 == 1);

    // while (true)
    //     decreases *;
    // {
    //     Mulqacc256(false, w28, 1, w29, 0, 1);
    // }
}

#verbatim
}
#endverbatim
