include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../code/otbn_mul_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

module otbn_mul {

import opened bignum_vale
import opened otbn_mul_lemmas

import opened bignum_def
import opened ops
import opened types

import opened bignum_decls

#endverbatim

ghost procedure lemma_bn_half_mul(
    ghost wacc_g1: uint256,
    ghost wacc_g2: uint256,
    ghost wacc_g3: uint256,
    ghost wacc_g4: uint256,
    ghost wacc_g5: uint256,
    ghost wacc_g6: uint256,
    ghost wacc_g7: uint256,
    ghost wacc_g8: uint256,
    ghost wacc_g9: uint256,
    ghost wacc: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost result_g1: uint256,
    ghost result_g2: uint256,
    ghost w1: uint256,
    ghost w28: uint256,
    ghost w29: uint256
) extern;

function half_product(p: int, x:int, y:int): bool extern;

procedure half_mul(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
    ensures half_product(dst, src1, src2);
{
    let w1_g1 := dst;

    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    // BN.MULQACC.Z w28.0, w29.0, 0
    let wacc_g1 := wacc;
    assert wacc_g1 == mulqacc256(true, src1, 0, src2, 0, 0, 0);

    BN_MULQACC(src1, 1, src2, 0, 1);
    // BN.MULQACC w28.1, w29.0, 1
    let wacc_g2 := wacc;
    assert wacc_g2 == mulqacc256(false, src1, 1, src2, 0, 1, wacc_g1);

    BN_MULQACC_SO(dst, true, src1, 0, src2, 1, 1);
    // BN.MULQACC.SO w1.L, w28.0, w29.1, 1
    let wacc_g3 := wacc;
    let w1_g2 := dst;
    let result_g1 := mulqacc256(false, src1, 0, src2, 1, 1, wacc_g2);
    assert wacc_g3 == uint256_uh(result_g1)
        && w1_g2 == uint256_hwb(w1_g1, uint256_lh(result_g1), true);

    BN_MULQACC(src1, 2, src2, 0, 0);
    // BN.MULQACC w28.2, w29.0, 0
    let wacc_g4 := wacc;
    assert wacc_g4 == mulqacc256(false, src1, 2, src2, 0, 0, wacc_g3);

    BN_MULQACC(src1, 1, src2, 1, 0);
    // BN.MULQACC w28.1, w29.1, 0
    let wacc_g5 := wacc;
    assert wacc_g5 == mulqacc256(false, src1, 1, src2, 1, 0, wacc_g4);

    BN_MULQACC(src1, 0, src2, 2, 0);
    // BN.MULQACC w28.0, w29.2, 0
    let wacc_g6 := wacc;
    assert wacc_g6 == mulqacc256(false, src1, 0, src2, 2, 0, wacc_g5);

    BN_MULQACC(src1, 3, src2, 0, 1);
    // BN.MULQACC w28.3, w29.0, 1
    let wacc_g7 := wacc;
    assert wacc_g7 == mulqacc256(false, src1, 3, src2, 0, 1, wacc_g6);

    BN_MULQACC(src1, 2, src2, 1, 1);
    // BN.MULQACC w28.2, w29.1, 1
    let wacc_g8 := wacc;
    assert wacc_g8 == mulqacc256(false, src1, 2, src2, 1, 1, wacc_g7);

    BN_MULQACC(src1, 1, src2, 2, 1);
    // BN.MULQACC w28.1, w29.2, 1
    let wacc_g9 := wacc;
    assert wacc_g9 == mulqacc256(false, src1, 1, src2, 2, 1, wacc_g8);

    BN_MULQACC_SO(dst, false, src1, 0, src2, 3, 1);
    // BN.MULQACC.SO w1.U, w28.0, w29.3, 1
    let result_g2 := mulqacc256(false, src1, 0, src2, 3, 1, wacc_g9);
    assert wacc == uint256_uh(result_g2)
        && dst == uint256_hwb(w1_g2, uint256_lh(result_g2), false);

    lemma_bn_half_mul(wacc_g1, wacc_g2, wacc_g3, wacc_g4, wacc_g5, wacc_g6, wacc_g7, wacc_g8, wacc_g9, wacc,
        w1_g1, w1_g2, result_g1, result_g2,
        dst, src1, src2);
}

#verbatim
}
#endverbatim
