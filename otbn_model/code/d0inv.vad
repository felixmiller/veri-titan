include "decls.vad"
include "otbn_mul.vad"

#verbatim
include "../code/vale.dfy"
include "../code/d0inv_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"
include "../gen/otbn_mul.dfy"

module d0inv {

import opened d0inv_lemmas

import opened bignum_vale
import opened bignum_def
import opened ops
import opened types

import opened bignum_decls
import opened otbn_mul

#endverbatim

procedure Increment(inout dst:reg32)
    ensures
        dst == old(dst) + 1;
{
    Addi32(dst, dst, 1);
}

function half_product(p: int, x:int, y:int): bool extern;

function invariant_d0inv(i: uint32, w28: uint256, w29: uint256, w0: uint256) : bool extern;

function d0inv_256(w29: uint256, w28: uint256): bool extern;

ghost procedure lemma_d0inv_pre_loop(
    ghost w0_g0: uint256,
    ghost w0_g1: uint256,
    ghost w0: uint256,
    ghost w29: uint256) extern;

ghost procedure lemma_d0inv_mid_loop(
    ghost i_0: uint32,
    ghost w0: uint256,
    ghost w0_g1: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost w28: uint256,
    ghost w29: uint256,
    ghost w29_g1: uint256) extern;

ghost procedure lemma_d0inv_post_loop(
    ghost w28: uint256,
    ghost w29: uint256,
    ghost w29_g2: uint256,
    ghost w31: uint256) extern;

// TODO: loop doesn't actually use a register, add loop counter to model maybe
procedure d0inv(inout i:reg32)
    requires
        i == 0; w31 == 0; w28 % 2 == 1;
    reads
        w28;
    modifies
        w1; w0; w29; w31; flags; wacc;
    ensures
        d0inv_256(w29, w28);
{
    let w0_g1 := w0;

    BN_XOR(w0, w0, w0, false, 0);
    // BN.XOR w0, w0, w0
    let w0_g2 := w0;
    assert w0_g2 == xor256(w0_g1, w0_g1, false, 0);

    BN_ADDI(w0, w0, 1, false);
    // BN.ADDI w0, w0, 1
    assert w0 == fst(addi256(w0_g2, 1));

    BN_MOV(w29, w0);
    // BN.MOV w29, w0
    assert w29 == w0;

    lemma_d0inv_pre_loop(w0_g1, w0_g2, w0, w29);

    while (i < 256)
        invariant w31 == 0;
        invariant invariant_d0inv(i, w28, w29, w0);
        decreases 256 - i;
    {
        let w0_g1 := w0;
        let w29_g1 := w29;

        half_mul(w1, w28, w29);

        let w1_g1 := w1;
        assert half_product(w1_g1, w28, w29_g1);

        BN_AND(w1, w1, w0, false, 0);
        // BN.AND w1, w1, w0
        let w1_g2 := w1;
        assert w1_g2 == and256(w1_g1, w0_g1, false, 0);

        BN_OR(w29, w29, w1, false, 0);
        // BN.OR w29, w29, w1
        assert w29 == or256(w29_g1, w1_g2, false, 0);

        BN_ADD(w0, w0, w0, false, 0, false);
        // BN.ADD w0, w0, w0
        assert w0 == fst(add256(w0_g1, w0_g1, false, 0));

        let i_0 := i;

        Increment(i);

        lemma_d0inv_mid_loop(i_0, w0, w0_g1, w1_g1, w1_g2, w28, w29, w29_g1);
    }

    let w29_g2 := w29;

    BN_SUB(w29, w31, w29, false, 0, false);
    // BN.SUB w29, w31, w29

    assert w29 == fst(sub256(w31, w29_g2, false, 0));

    lemma_d0inv_post_loop(w28, w29, w29_g2, w31);
}

#verbatim
}
#endverbatim
