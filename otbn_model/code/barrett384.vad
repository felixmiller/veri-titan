include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../code/d0inv_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

module barrett384 {

import opened bignum_vale

import opened bignum_def
import opened ops
import opened types

import opened bignum_decls

#endverbatim

}

ghost procedure lemma_bn_half_mul(
    ghost wacc_g1: uint256,
    ghost wacc_g2: uint256,
    ghost wacc_g3: uint256,
    ghost wacc_g4: uint256,
    ghost wacc_g5: uint256,
    ghost wacc_g6: uint256,
    ghost wacc_g7: uint256,
    ghost wacc_g8: uint256,
    ghost wacc_g9: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost result_g1: uint256,
    ghost result_g2: uint256,
    ghost w1: uint256,
    ghost w28: uint256,
    ghost w29: uint256
) extern;

function half_product(p: int, x:int, y:int): bool extern;

procedure half_mul(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
    ensures half_product(dst, src1, src2);
{
    let w1_g1 := dst;

    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    // BN.MULQACC.Z w28.0, w29.0, 0
    let wacc_g1 := wacc;
    assert wacc_g1 == mulqacc256(true, src1, 0, src2, 0, 0, 0);

    BN_MULQACC(src1, 1, src2, 0, 1);
    // BN.MULQACC w28.1, w29.0, 1
    let wacc_g2 := wacc;
    assert wacc_g2 == mulqacc256(false, src1, 1, src2, 0, 1, wacc_g1);

    BN_MULQACC_SO(dst, true, src1, 0, src2, 1, 1);
    // BN.MULQACC.SO w1.L, w28.0, w29.1, 1
    let wacc_g3 := wacc;
    let w1_g2 := dst;
    let result_g1 := mulqacc256(false, src1, 0, src2, 1, 1, wacc_g2);
    assert wacc_g3 == uint256_uh(result_g1)
        && w1_g2 == uint256_hwb(w1_g1, uint256_lh(result_g1), true);
    
procedure mul384(
    inout dst_upper: reg256,
    inout dst_lower:reg256,
    in src1_upper: reg256, 
    in src1_lower: reg256,
    in src2_upper: reg256, 
    in src2_lower: reg256,
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
{
//  bn.mulqacc.z          w8.0, w10.0,   0
    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    
//  bn.mulqacc            w8.0, w10.1,  64
//  bn.mulqacc.so w16.L,  w8.1, w10.0,  64
//  bn.mulqacc            w8.0, w10.2,   0
//  bn.mulqacc            w8.1, w10.1,   0
//  bn.mulqacc            w8.2, w10.0,   0
//  bn.mulqacc            w8.0, w10.3,  64
//  bn.mulqacc            w8.1, w10.2,  64
//  bn.mulqacc            w8.2, w10.1,  64
//  bn.mulqacc.so w16.U,  w8.3, w10.0,  64
//  bn.mulqacc            w8.0, w11.0,   0
//  bn.mulqacc            w8.1, w10.3,   0
//  bn.mulqacc            w8.2, w10.2,   0
//  bn.mulqacc            w8.3, w10.1,   0
//  bn.mulqacc            w9.0, w10.0,   0
//  bn.mulqacc            w8.0, w11.1,  64
//  bn.mulqacc            w8.1, w11.0,  64
//  bn.mulqacc            w8.2, w10.3,  64
//  bn.mulqacc            w8.3, w10.2,  64
//  bn.mulqacc            w9.0, w10.1,  64
//  bn.mulqacc.so w17.L,  w9.1, w10.0,  64
//  bn.mulqacc            w8.1, w11.1,   0
//  bn.mulqacc            w8.2, w11.0,   0
//  bn.mulqacc            w8.3, w10.3,   0
//  bn.mulqacc            w9.0, w10.2,   0
//  bn.mulqacc            w9.1, w10.1,   0
//  bn.mulqacc            w8.2, w11.1,  64
//  bn.mulqacc            w8.3, w11.0,  64
//  bn.mulqacc            w9.0, w10.3,  64
//  bn.mulqacc.so w17.U,  w9.1, w10.2,  64
//  bn.mulqacc            w8.3, w11.1,   0
//  bn.mulqacc            w9.0, w11.0,   0
//  bn.mulqacc            w9.1, w10.3,   0
//  bn.mulqacc            w9.0, w11.1,  64
//  bn.mulqacc.so w18.L,  w9.1, w11.0,  64
//  bn.mulqacc.so w18.U,  w9.1, w11.1,   0
//
//  bn.add w18, w18, w31

}
    
procedure barrett834(inout 
#verbatim
}
#endverbatim
