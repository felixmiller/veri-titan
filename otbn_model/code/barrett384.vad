include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../code/d0inv_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

module barrett384 {

import opened bignum_vale
import opened d0inv_lemmas

import opened bignum_def
import opened ops
import opened types

import opened bignum_decls

#endverbatim

procedure mul384()
    reads
        w8; w9; w10; w11; w31;
    modifies
        wacc; w18; w17; w16; flags;
{
    //  bn.mulqacc.z          w8.0, w10.0,   0
    BN_MULQACC_Z(w8, 0, w10, 0, 0);

    //  bn.mulqacc            w8.0, w10.1,  64
    BN_MULQACC(w8, 0, w10, 1, 1);
    
    //  bn.mulqacc.so w16.L,  w8.1, w10.0,  64
    BN_MULQACC_SO(w16, true, w8, 1, w10, 0, 1);
    
    //  bn.mulqacc            w8.0, w10.2,   0
    BN_MULQACC(w8, 0, w10, 2, 0);
    
    //  bn.mulqacc            w8.1, w10.1,   0
    BN_MULQACC(w8, 1, w10, 1, 0);

    //  bn.mulqacc            w8.2, w10.0,   0
    BN_MULQACC(w8, 2, w10, 0, 0);
    
    //  bn.mulqacc            w8.0, w10.3,  64
    BN_MULQACC(w8, 0, w10, 3, 1);
    
    //  bn.mulqacc            w8.1, w10.2,  64
    BN_MULQACC(w8, 1, w10, 2, 1);
    
    //  bn.mulqacc            w8.2, w10.1,  64
    BN_MULQACC(w8, 2, w10, 1, 1);
    
    //  bn.mulqacc.so w16.U,  w8.3, w10.0,  64
    BN_MULQACC_SO(w16, false, w8, 3, w10, 0, 1);
    
    //  bn.mulqacc            w8.0, w11.0,   0
    BN_MULQACC(w8, 0, w11, 0, 0);
    
    //  bn.mulqacc            w8.1, w10.3,   0
    BN_MULQACC(w8, 1, w10, 3, 0);
    
    //  bn.mulqacc            w8.2, w10.2,   0
    BN_MULQACC(w8, 2, w10, 2, 0);
    
    //  bn.mulqacc            w8.3, w10.1,   0
    BN_MULQACC(w8, 3, w10, 1, 0);
    
    //  bn.mulqacc            w9.0, w10.0,   0
    BN_MULQACC(w9, 0, w10, 0, 0);
    
    //  bn.mulqacc            w8.0, w11.1,  64
    BN_MULQACC(w8, 0, w11, 1, 1);
    
    //  bn.mulqacc            w8.1, w11.0,  64
    BN_MULQACC(w8, 1, w11, 0, 1);
    
    //  bn.mulqacc            w8.2, w10.3,  64
    BN_MULQACC(w8, 2, w10, 3, 1);
    
    //  bn.mulqacc            w8.3, w10.2,  64
    BN_MULQACC(w8, 3, w10, 2, 1);
    
    //  bn.mulqacc            w9.0, w10.1,  64
    BN_MULQACC(w9, 0, w10, 1, 1);
    
    //  bn.mulqacc.so w17.L,  w9.1, w10.0,  64
    BN_MULQACC_SO(w17, true, w9, 1, w10, 0, 1);
    
    //  bn.mulqacc            w8.1, w11.1,   0
    BN_MULQACC(w8, 1, w11, 1, 0);
    
    //  bn.mulqacc            w8.2, w11.0,   0
    BN_MULQACC(w8, 2, w11, 0, 0);
    
    //  bn.mulqacc            w8.3, w10.3,   0
    BN_MULQACC(w8, 3, w10, 3, 0);
    
    //  bn.mulqacc            w9.0, w10.2,   0
    BN_MULQACC(w9, 0, w10, 2, 0);
    
    //  bn.mulqacc            w9.1, w10.1,   0
    BN_MULQACC(w9, 1, w10, 1, 0);
        
    //  bn.mulqacc            w8.2, w11.1,  64
    BN_MULQACC(w8, 2, w11, 1, 1);

    //  bn.mulqacc            w8.3, w11.0,  64
    BN_MULQACC(w8, 3, w11, 0, 1);
    
    //  bn.mulqacc            w9.0, w10.3,  64
    BN_MULQACC(w9, 0, w10, 3, 1);
    
    //  bn.mulqacc.so w17.U,  w9.1, w10.2,  64
    BN_MULQACC_SO(w17, false, w9, 1, w10, 2, 1);
    
    //  bn.mulqacc            w8.3, w11.1,   0
    BN_MULQACC(w8, 3, w11, 1, 0);
    
    //  bn.mulqacc            w9.0, w11.0,   0
    BN_MULQACC(w9, 0, w11, 0, 0);
    
    //  bn.mulqacc            w9.1, w10.3,   0
    BN_MULQACC(w9, 1, w10, 3, 0);
    
    //  bn.mulqacc            w9.0, w11.1,  64
    BN_MULQACC(w9, 0, w11, 1, 1);
    
    //  bn.mulqacc.so w18.L,  w9.1, w11.0,  64
    BN_MULQACC(w9, 0, w11, 1, 1);
    
    //  bn.mulqacc.so w18.U,  w9.1, w11.1,   0
    BN_MULQACC_SO(w18, false, w9, 1, w11, 1, 0);


    //  bn.add w18, w18, w31
    BN_ADD(w18, w18, w31, false, 0, false);
}
    
#verbatim
}
#endverbatim
