import os, subprocess
from subprocess import PIPE

def get_ver_path(dfy_path):
    # assuming there aren't duplicated names
    return "./gen/" + dfy_path.split("/")[-1] + ".ver"

def get_dfy_includes(dfy_file):
    command = "dafny /printIncludes:Immediate %s" % dfy_file
    outputs = subprocess.run(command, shell=True, stdout=PIPE).stdout
    outputs = outputs.decode("utf-8")
    if outputs == "":
        return []
    includes = outputs.splitlines()[0]
    includes = includes.split(";")
    return includes

def verify_rec(dfy_file):
    includes = get_dfy_includes(dfy_file)
    ver_path = get_ver_path(dfy_file)

    for path in includes:
        dep_ver_path = get_ver_path(path)
        if dep_ver_path == ver_path:
            continue
        env.Dafny(dep_ver_path, path)
        Depends(ver_path, dep_ver_path)

    Depends(ver_path, dfy_file)
    env.Dafny(ver_path, dfy_file)

dfy_bld = Builder(action = "dafny /compile:0 $SOURCE && touch $TARGET")
vad_bld = Builder(action = "vale.exe -dafnyText -in $SOURCE -out $TARGET")

env = Environment(ENV = os.environ, BUILDERS = {'Dafny' : dfy_bld, "Vale" : vad_bld})

for file in os.listdir("./code"):
    if file.endswith(".vad"):
        vad_file = os.path.join("./code", file)
        file = file.replace(".vad", ".dfy")
        dfy_file = os.path.join("./gen", file)
        env.Vale(dfy_file, vad_file)

for root, dirs, files in os.walk("."):
    for file in files:
        if file.endswith(".dfy"):
            dfy_file = os.path.join(root, file)
            verify_rec(dfy_file)
