import os, subprocess
from subprocess import PIPE

dfy_verify_cmd = "dafny /compile:0 /nologo "

dfy_bld = Builder(action = dfy_verify_cmd + "$SOURCE && touch $TARGET")
vad_bld = Builder(action = "vale.exe -dafnyText -in $SOURCE -out $TARGET")

env = Environment(ENV = os.environ, BUILDERS = {'Dafny' : dfy_bld, "Vale" : vad_bld})

AddOption('--proc',
            dest='proc',
            type='string',
            nargs=1,
            action='store',
            help='name of the method/lemma/function/predicate')

if not os.path.exists("./gen"):
    os.makedirs("./gen")

def get_ver_path(dfy_path):
    # assuming there aren't duplicated names
    return "./gen/" + dfy_path.split("/")[-1] + ".ver"

def get_dfy_includes(dfy_file):
    command = "dafny /printIncludes:Immediate %s" % dfy_file
    outputs = subprocess.run(command, shell=True, stdout=PIPE).stdout
    outputs = outputs.decode("utf-8")
    if outputs == "":
        return []
    includes = outputs.splitlines()[0]
    includes = includes.split(";")
    return includes

def get_dfy_files():
    dfy_files = list()
    for root, dirs, files in os.walk("."):
        for file in files:
            if file.endswith(".dfy"):
                dfy_files.append(os.path.join(root, file))
    return dfy_files

def verify_rec(dfy_file):
    includes = get_dfy_includes(dfy_file)
    ver_path = get_ver_path(dfy_file)

    for path in includes:
        dep_ver_path = get_ver_path(path)
        if dep_ver_path == ver_path:
            continue
        env.Dafny(dep_ver_path, path)
        Depends(ver_path, dep_ver_path)

    Depends(ver_path, dfy_file)
    env.Dafny(ver_path, dfy_file)

def verify_proc(proc, dfy_files):
    command = 'grep -e "\(method\|function\|lemma\|predicate\).%s" -l ' % proc + " ".join(dfy_files)
    outputs = subprocess.run(command, shell=True, stdout=PIPE).stdout
    outputs = outputs.decode("utf-8")
    proc = proc.replace("_", "__")

    for dfy_file in outputs.splitlines():
        print("verify %s in %s" % (proc, dfy_file))
        command = dfy_verify_cmd + "/proc:*%s " % proc + dfy_file
        r = subprocess.check_output(command, shell=True).decode("utf-8")
        print(r)
 
proc = GetOption('proc')

for file in os.listdir("./code"):
    if file.endswith(".vad"):
        # if any vad file is updated, generate the dfy file (no verification)
        vad_file = os.path.join("./code", file)
        file = file.replace(".vad", ".dfy")
        dfy_file = os.path.join("./gen", file)
        env.Vale(dfy_file, vad_file)

dfy_files = get_dfy_files()

if proc:
    verify_proc(proc, dfy_files)
else:
    for dfy_file in dfy_files:
        verify_rec(dfy_file)
